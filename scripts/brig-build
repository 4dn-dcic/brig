#!/bin/bash

if [ "$(basename $(dirname $(pwd)))" != "functions" ]; then
    echo 'This script only works if your working directory is that of a'
    echo 'lambda function. That is, you must be in a folder whose'
    echo 'grandparent is named "functions".'
    exit 1
fi

do_build=TRUE
testonly=

if [ "$1" = "--testonly" ]; then
    testonly=TRUE
    do_build=
    shift 1
fi

if [ $# -ne 0 ]; then
    echo "Syntax: $0 [ --help | --testonly ]"
    exit 1
fi

commit_id=`git describe --always --dirty`

# Uncomment for debugging.
# echo "commit_id=${commit_id}"

dirty_flag=`echo ${commit_id} | cut -c 8-`

# Uncomment for debugging.
# echo "dirty_flag=${dirty_flag}"

if [ -n "${dirty_flag}" ]; then
    if [ -n "${testonly}" ]; then
        echo "The repository is dirty, but we are running in testonly mode."
        echo "Even if tests succeed, the build will not be made current (locally)."
    else
        echo "Changes have been made to this repository."
        echo "To force testing anyway, use --testonly."
        exit 1
    fi
else
    if [ -n "${testonly}" ]; then
        echo "The repository is clean, but we are running in testonly mode."
        echo "Even if the tests succeed, the build will not be made current (locally)."
    else
        echo "The repository is clean, and we are running in production mode."
	echo "If the tests succeed, the build will be made current (locally)."
    fi
fi

archive_name="$(date "+%Y%m%d%H%M%S")-${commit_id}.zip"

# Make a fresh stg dir to work with.

if [ -e 'stg' ]; then
    rm -rf stg
fi

mkdir stg

if [ ! -e 'builds' ]; then

    mkdir builds

fi

# Copy all sources to stg/

echo  "Current directory: "`pwd`

echo "Building zip ${archive_name} ..."

cp -Rp src/ stg/

find stg -name "*.pyc" -delete

rm -rf venv

pyenv exec python -m venv venv || python3 -m venv venv

echo "Upgrading pip ..."

pip install --upgrade pip

pushd stg > /dev/null

# Following advice from
# https://aws.amazon.com/premiumsupport/knowledge-center/build-python-lambda-deployment-package/

if [ -e "../requirements.txt" ]; then

    echo "Installing requirements ..."

    pip install -r ../requirements.txt -t ./

    echo "Requirements installed."

else

    echo "No requirements.txt found."

fi

chmod -R 755 .

zip -r ../${archive_name} .

popd  > /dev/null

echo "Activating $(pwd)/venv ..."

source venv/bin/activate

pip install -r requirements.txt

pip install pytest

mv "${archive_name}" builds/

pushd builds/ > /dev/null

ln -f -s "${archive_name}" staged

echo "Running unit tests..."

pushd ../stg  > /dev/null

# We name the test files in this directory specifically because we don't
# want to descend into all the included libraries that may have test files
# we don't want to run.

PYTHONPATH=".:${PYTHONPATH}" pytest -vv test_*.py

if [ $? -ne 0 ]; then

    popd > /dev/null
    echo "Tests of 'stg' failed."
    exit 1

elif [ "${do_build}" != "TRUE" ]; then

    popd > /dev/null
    echo "Tests of 'stg' succeeded."
    echo "NOT making dirty build current."
    exit 0

fi

if [ -e "current" ]; then

    echo "Changing 'current' build to 'previous'."
    mv current previous

fi

echo "Making this successful build 'current'."

ln -f -s "${archive_name}" current

popd > /dev/null

echo "builds/${archive_name} created."
