if [ "$(basename $(dirname $(pwd)))" != "functions" ]; then
    echo 'This script only works if your working directory is that of a'
    echo 'lambda function. That is, you must be in a folder whose'
    echo 'grandparent is named "functions".'
    exit 1
fi

do_build=TRUE
testonly=

if [ "$1" = "--testonly" ]; then
    testonly=TRUE
    do_build=
    shift 1
fi

if [ $# -ne 0 ]; then
    echo "Syntax: $0 [ --help | --testonly ]"
    exit 1
fi

commit_id=`git describe --always --dirty`

dirty_flag=`echo ${commit_id} | cut -c 8-`

if [ -n "${dirty_flag}" ]; then
    if [ -n "${testonly}" ]; then
        echo "The repository is dirty, but we are running in testonly mode."
        echo "Even if tests succeed, the build will not be made current (locally)."
    else
        echo "Changes have been made to this repository."
        echo "To force testing anyway, use --testonly."
        exit 1
    fi
else
    if [ -n "${testonly}" ]; then
        echo "The repository is clean, but we are running in testonly mode."
        echo "Even if the tests succeed, the build will not be made current (locally)."
    else
        echo "The repository is clean, and we are running in production mode."
	echo "If the tests suceed, the build will be made current (locally)."
    fi
fi

archive_name="$(date "+%m%d%H%M%Y%S")-${commit_id}.zip"

# Make a fresh stg dir to work with.

if [ -e 'stg' ]; then
    rm -rf stg
fi

mkdir stg

if [ ! -e 'builds' ]; then

    mkdir builds

fi


# Copy all sources to stg/

echo "Building zip ${archive_name} ..."

cp src/* stg/

pushd stg > /dev/null

# Following advice from
# https://aws.amazon.com/premiumsupport/knowledge-center/build-python-lambda-deployment-package/

if [ -e "../requirements.txt" ]; then

    echo "Installing requirements ..."

    pip install -r ../requirements.txt -t ./

    echo "Requirements installed."

else

    echo "No requirements.txt found."

fi

chmod -R 755 .

zip -r ../${archive_name} .

popd  > /dev/null

mv "${archive_name}" builds/

pushd builds/ > /dev/null

ln -f -s "${archive_name}" staged

if [ -e "../scripts/test" ]; then

    echo "Running scripts/test on staged files in 'stg' ..."
    # All scripts must expect to receive an argument of what folder to test.
    # TODO: It might be should centralize that. -kmp 23-Mar-2020

    ../scripts/test ../stg

    if [ $? -ne 0 ]; then

        echo "Tests of 'stg' failed."
	exit 1

    elif [ "${do_build}" != "TRUE" ]; then

        echo "Tests of 'stg' succeeded."
        echo "NOT making dirty build current."
	exit 0

    fi

else

    echo "No scripts/test is present. No acceptance testing being done."

fi

if [ -e "${current}" ]; then

  mv current previous

fi


ln -f -s "${archive_name}" current

popd > /dev/null

echo "builds/${archive_name} created."
